{
  "posts": [
    {
      "id": 1,
      "author": {
        "id": 2,
        "name": "Андрей",
        "email": "andrey@gmail.com",
        "img": "https://meloman.ru/media/upload/photos/%D0%94%D1%83%D0%B1%D0%BE%D0%B2_%D0%B3%D0%BE%D1%80%D0%B8%D0%B7%D0%BE%D0%BD%D1%82_900%D1%85600.820x350.jpg"
      },
      "authorId": 2,
      "heading": "Как мы используем RTK Query в React-приложениях",
      "content": "С момента своего первого релиза в 2015 году Redux использовался и продолжает использоваться на множестве клиентских приложений. Несмотря на все достоинства, которые предоставляет данное решение (предсказуемое управление состоянием, удобная отладка с помощью Redux DevTools и др.), некоторые разработчики сетуют на излишнее количество “шаблонного кода” при реализации даже самого просто функционала и предпочитают альтернативные инструменты для управления состоянием в клиентских приложениях.",
      "comments": []
    },
    {
      "id": 2,
      "author": {
        "id": 1,
        "name": "Олег",
        "email": "oleg@gmail.com",
        "img": "https://www.mariinsky.ru/images/cms/data/avatar_guests/senchenko_oleg.jpg"
      },
      "authorId": 1,
      "heading": "Мотивация использования Redux",
      "content": "Механизм локального хранилища компонента, который поставляется вместе с базовой библиотекой (React) неудобен тем, что такое хранилище изолировано. К примеру, если вы хотите, чтобы разные независимые компоненты реагировали на какое-либо событие, вам придётся либо передавать локальное состояние в виде пропсов дочерним компонентам, либо поднимать его вверх до ближайшего родительского компонента. В обоих случаях делать это не удобно. Код становится более грязным, трудночитаемым, а компоненты зависимыми от их вложенности. Redux снимает эту проблему так как всё состояние доступно всем компонентом без особых трудностей. Redux является универсальным средством разработки и может быть использован в связке с различными библиотеками и фреймворками. В этой же статье будет рассматривается использование Redux в React приложениях.",
      "comments": []
    },
    {
      "id": 3,
      "author": {
        "id": 1,
        "name": "Олег",
        "email": "oleg@gmail.com",
        "img": "https://www.mariinsky.ru/images/cms/data/avatar_guests/senchenko_oleg.jpg"
      },
      "authorId": 1,
      "heading": "Достаточно знать несколько типов?",
      "content": "Типы — это основная концепция, связанная с TypeScript и то, ради чего этот язык задумывался. Если открыть цели команды TypeScript, то там явно написано: они разрабатывают статическую типовую систему для JavaScript.Люди очень часто говорят, что TypeScript — это небольшая надстройка, superset над JavaScript, который добавляет типы. И что достаточно изучить несколько типов, чтобы начать писать на TypeScript и автоматически получать хороший код. ",
      "comments": []
    },
    {
      "id": 4,
      "author": {
        "id": 3,
        "name": "Алексей",
        "email": "volik.aiii@gmail.com",
        "img": "https://avatars.githubusercontent.com/u/82263481?v=4"
      },
      "authorId": 3,
      "heading": "Хочу поделиться с вами заметками о Next.js (надеюсь, кому-нибудь пригодится).",
      "content": "Next.js — это основанный на React фреймворк, предназначенный для разработки веб-приложений, обладающих функционалом, выходящим за рамки SPA, т.е. так называемых одностраничных приложений.Как известно, основным недостатком SPA являются проблемы с индексацией страниц таких приложений поисковыми роботами, что негативно влияет на SEO.Впрочем, по моим личным наблюдениям, в последнее время ситуация стала меняться к лучшему, по крайней мере, страницы моего небольшого SPA-PWA-приложения нормально индексируются.Кроме того, существуют специальные инструменты, такие как react-snap, позволяющие превратить React-SPA в многостраничник путем предварительного рендеринга приложения в статическую разметку. Метаинформацию же можно встраивать в head с помощью таких утилит, как react-helmet.",
      "comments": []
    }
  ],
  "comments": [
    {
      "id": 1,
      "idPost": 1,
      "author": {
        "id": 1,
        "name": "Олег",
        "email": "oleg@gmail.com",
        "img": "https://www.mariinsky.ru/images/cms/data/avatar_guests/senchenko_oleg.jpg"
      },
      "content": "Спасибо за работу"
    },
    {
      "id": 2,
      "idPost": 2,
      "author": {
        "id": 2,
        "name": "Андрей",
        "email": "andrey@gmail.com",
        "img": "https://meloman.ru/media/upload/photos/%D0%94%D1%83%D0%B1%D0%BE%D0%B2_%D0%B3%D0%BE%D1%80%D0%B8%D0%B7%D0%BE%D0%BD%D1%82_900%D1%85600.820x350.jpg"
      },
      "content": "Странно"
    },
    {
      "id": 4,
      "idPost": 2,
      "author": {
        "id": 2,
        "name": "Андрей",
        "email": "andrey@gmail.com",
        "img": "https://meloman.ru/media/upload/photos/%D0%94%D1%83%D0%B1%D0%BE%D0%B2_%D0%B3%D0%BE%D1%80%D0%B8%D0%B7%D0%BE%D0%BD%D1%82_900%D1%85600.820x350.jpg"
      },
      "content": "Как то непонятно"
    },
    {
      "id": 5,
      "idPost": 3,
      "author": {
        "id": 1,
        "name": "Олег",
        "email": "oleg@gmail.com",
        "img": "https://www.mariinsky.ru/images/cms/data/avatar_guests/senchenko_oleg.jpg"
      },
      "content": "Молодец"
    }
  ],
  "profile": [
    {
      "id": 1,
      "name": "Олег",
      "email": "oleg@gmail.com",
      "password": "4982AFfsdi",
      "img": "https://www.mariinsky.ru/images/cms/data/avatar_guests/senchenko_oleg.jpg"
    },
    {
      "id": 2,
      "name": "Андрей",
      "email": "andrey@gmail.com",
      "password": "4982GFfsdi",
      "img": "https://meloman.ru/media/upload/photos/%D0%94%D1%83%D0%B1%D0%BE%D0%B2_%D0%B3%D0%BE%D1%80%D0%B8%D0%B7%D0%BE%D0%BD%D1%82_900%D1%85600.820x350.jpg"
    },
    {
      "id": 3,
      "name": "Алексей",
      "email": "volik.aiii@gmail.com",
      "password": "4982AFfOfi",
      "img": "https://avatars.githubusercontent.com/u/82263481?v=4"
    }
  ]
}
