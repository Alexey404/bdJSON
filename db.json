{
  "posts": [
    {
      "id": 1,
      "author": { "id": 2, "name": "Андрей", "email": "andrey@gmail.com" },
      "authorId": 2,
      "heading": "Как мы используем RTK Query в React-приложениях",
      "content": "С момента своего первого релиза в 2015 году Redux использовался и продолжает использоваться на множестве клиентских приложений. Несмотря на все достоинства, которые предоставляет данное решение (предсказуемое управление состоянием, удобная отладка с помощью Redux DevTools и др.), некоторые разработчики сетуют на излишнее количество “шаблонного кода” при реализации даже самого просто функционала и предпочитают альтернативные инструменты для управления состоянием в клиентских приложениях.",
      "comments": [],
      "loadComments": false
    },
    {
      "id": 2,
      "author": { "id": 1, "name": "Олег", "email": "oleg@gmail.com" },
      "authorId": 1,
      "heading": "Мотивация использования Redux",
      "content": "Механизм локального хранилища компонента, который поставляется вместе с базовой библиотекой (React) неудобен тем, что такое хранилище изолировано. К примеру, если вы хотите, чтобы разные независимые компоненты реагировали на какое-либо событие, вам придётся либо передавать локальное состояние в виде пропсов дочерним компонентам, либо поднимать его вверх до ближайшего родительского компонента. В обоих случаях делать это не удобно. Код становится более грязным, трудночитаемым, а компоненты зависимыми от их вложенности. Redux снимает эту проблему так как всё состояние доступно всем компонентом без особых трудностей. Redux является универсальным средством разработки и может быть использован в связке с различными библиотеками и фреймворками. В этой же статье будет рассматривается использование Redux в React приложениях.",
      "comments": [],
      "loadComments": false
    },
    {
      "id": 3,
      "author": { "id": 2, "name": "Андрей", "email": "andrey@gmail.com" },
      "authorId": 2,
      "heading": "Разбираемся в redux-saga: От генераторов действий к сагам",
      "content": "Любой redux разработчик расскажет вам, что одной из самых тяжелейших частей разработки приложений являются асинхронные вызовы — как вы будете обрабатывать реквесты, таймауты и другие коллбэки без усложнения redux действий(actions) и редьюсеров(reducers).",
      "comments": [],
      "loadComments": false
    },
    {
      "id": 4,
      "author": { "id": 1, "name": "Олег", "email": "oleg@gmail.com" },
      "authorId": 1,
      "heading": "Достаточно знать несколько типов?",
      "content": "Типы — это основная концепция, связанная с TypeScript и то, ради чего этот язык задумывался. Если открыть цели команды TypeScript, то там явно написано: они разрабатывают статическую типовую систему для JavaScript.Люди очень часто говорят, что TypeScript — это небольшая надстройка, superset над JavaScript, который добавляет типы. И что достаточно изучить несколько типов, чтобы начать писать на TypeScript и автоматически получать хороший код. ",
      "comments": [],
      "loadComments": false
    }
  ],
  "comments": [
    {
      "id": 1,
      "idPost": 1,
      "author": { "id": 1, "name": "Олег", "email": "oleg@gmail.com" },
      "content": "Спасибо за работу"
    },
    {
      "id": 2,
      "idPost": 2,
      "author": { "name": "Андрей", "id": 2, "email": "andrey@gmail.com" },
      "content": "Странно"
    },
    {
      "id": 3,
      "idPost": 1,
      "author": { "name": "Андрей", "id": 2, "email": "andrey@gmail.com" },
      "content": "Обращайся"
    },
    {
      "id": 4,
      "idPost": 2,
      "author": { "name": "Андрей", "id": 2, "email": "andrey@gmail.com" },
      "content": "Как то непонятно"
    },
    {
      "id": 5,
      "idPost": 3,
      "author": { "id": 1, "name": "Олег", "email": "oleg@gmail.com" },
      "content": "Молодец"
    }
  ],
  "profile": [
    { "id": 1, "name": "Олег", "email": "oleg@gmail.com" },
    { "id": 2, "name": "Андрей", "email": "andrey@gmail.com" }
  ]
}
